zad1------------------------------------------------------------------------------------------------------------------------------
import re
import psycopg2

# Функция для чтения файла
def read_log_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.readlines()
    except FileNotFoundError:
        print('Файл не найден!')
        return []

# Функция для нахождения минимального и максимального значений в словаре
def find_min_max(dictionary_of_data_from_file):
    min_max_values = {}
    for variable, values in dictionary_of_data_from_file.items():
        min_val = min(values)
        max_val = max(values)
        min_max_values[variable] = (min_val, max_val)
    return min_max_values

# Функция для записи статистики в выходной файл
def write_statistics(day, year, category_contents, file_path):
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(f'{day} {year}\n')
        file.write('Переменная\tmin\tmax\n')
        # Нахождение минимального и максимального значений для каждой переменной
        min_max_values = find_min_max({item: count for contents in category_contents.values() for item, count in contents.items()})
        for variable, (min_val, max_val) in min_max_values.items():
            file.write(f'{variable:<10}\t{min_val}\t{max_val}\n')

# Функция для вывода статистики в консоль
def print_statistics(day, year, category_contents):
    print(f'{day} {year}')
    print('Переменная\tmin\tmax')
    # Нахождение минимального и максимального значений для каждой переменной
    min_max_values = find_min_max({item: count for contents in category_contents.values() for item, count in contents.items()})
    for variable, (min_val, max_val) in min_max_values.items():
        print(f'{variable:<10}\t{min_val}\t{max_val}')

# Функция для обработки файла логов
def process_log_file(file_input, day, year):
    lines = read_log_file(file_input)
    category_name = ''
    info_from_file = {}

    is_table_finished = True # Флаг, показывающий, что таблица в файле закончилась
    is_required_day = False # Флаг, показывающий, что день в файле совпадает с выбранным днем

    # Цикл по всем строкам файла
    for line in lines:
        words = re.split(r'\s+', line)

        if len(words[0].replace('-', '')) == 0: # Если строка содержит только дефисы, значит таблица закончилась
            is_table_finished = True
            continue

        if is_table_finished and len(line) > 10:
            is_table_finished = False
            is_required_day = (day in line.replace('  ', ' ')) and line.strip().endswith(year)
            continue

        if not is_required_day:
            continue

        if len(words) >= 1 and words[0].startswith('-----'):
            category_name = ' '.join(words).strip()
            if category_name not in info_from_file:
                info_from_file[category_name] = {}
            continue

        # Если строка содержит данные, сохраняем их в словаре
        if words[1] == '-':
            if f'{words[0]} -' in info_from_file[category_name]:
                info_from_file[category_name][f'{words[0]} -'].append(int(words[2]))
            else:
                info_from_file[category_name][f'{words[0]} -'] = [int(words[2])]
        else:
            if words[0] in info_from_file[category_name]:
                info_from_file[category_name][words[0]].append(int(words[1]))
            else:
                info_from_file[category_name][words[0]] = [int(words[1])]

    if not info_from_file:
        print('Такой даты нет в файле')
        return None

    return info_from_file

# Функция для проверки ввода даты и года
def input_date_and_year():
    # Проверка ввода даты
    while True:
        day = input('Введите день для поиска (формат: Nov 9): ')
        if re.match(r'^[A-Za-z]{3} \d{1,2}$', day):
            break
        else:
            print('Неверный формат даты. Пожалуйста, введите дату в формате "Nov 9"')

    # Проверка ввода года
    while True:
        year = input('Введите год: ')
        if re.match(r'^\d{4}$', year):
            break
        else:
            print('Неверный формат года. Пожалуйста, введите год в формате "2023"')

    return day, year

# Функция для записи статистики в базу данных
def write_to_db(day, year, category_contents, db_name, db_user, db_password, db_host, db_port):
    try:
        # Подключение к базе данных
        conn = psycopg2.connect(
            dbname=db_name,
            user=db_user,
            password=db_password,
            host=db_host,
            port=db_port
        )

        # Создание курсора для выполнения SQL-запросов
        cur = conn.cursor()

        # Нахождение минимального и максимального значений для каждой переменной
        min_max_values = find_min_max({item: count for contents in category_contents.values() for item, count in contents.items()})

        # Запись данных в базу данных
        for variable, (min_val, max_val) in min_max_values.items():
            cur.execute(
                "INSERT INTO statistics_sample (Date, Variable, min, max) VALUES (%s, %s, %s, %s)",
                (f"{year}-{day.replace(' ', '-')}", variable, min_val, max_val)
            )
        conn.commit()

        # Закрытие курсора и соединения с базой данных
        cur.close()
        conn.close()

        print(f'Данные были успешно записаны в базу данных {db_name}')

    except (Exception, psycopg2.DatabaseError) as error:
        print('Error: ', error)
        conn.rollback()
        cur.close()
        conn.close()


# Меню выбора действия
print('Выберите действие:')
print('1. Записать данные в файл')
print('2. Вывести данные в консоль')
print('3. Записать данные в базу данных (PostgreSQL)')
action = int(input())

if action == 1:
    file_input = input('Выберите входной файл: ') #"C:/Users/pasch/Desktop/sample.txt"
    file_output = input('Выберите выходной файл: ') #"C:/Users/pasch/Desktop/output_file.txt"

    day, year = input_date_and_year()

    info_from_file = process_log_file(file_input, day, year)

    if info_from_file is not None:
        write_statistics(day, year, info_from_file, file_output)
        print(f'Данные были успешно записаны в файл {file_output}')
elif action == 2:
    file_input = input('Выберите входной файл: ') #"C:/Users/pasch/Desktop/sample.txt"

    day, year = input_date_and_year()

    info_from_file = process_log_file(file_input, day, year)

    if info_from_file is not None:
        print_statistics(day, year, info_from_file)

elif action == 3:

    file_input = input('Выберите входной файл: ')  # "C:/Users/pasch/Desktop/sample.txt"
    # Запись данных в базу данных PostgreSQL
    # Ввод параметров соединения с базой данных
    db_name = input('Введите имя базы данных: ') #pr_practice_VorobyevP
    db_user = input('Введите имя пользователя базы данных: ') #postgres
    db_password = input('Введите пароль пользователя базы данных: ') #admin
    db_host = input('Введите хост базы данных: ') #localhost
    db_port = input('Введите порт базы данных: ') #5432

    # Ввод даты и года
    day, year = input_date_and_year()

    # Обработка файла логов и запись данных в базу данных
    info_from_file = process_log_file(file_input, day, year)
    if info_from_file is not None:
        write_to_db(day, year, info_from_file, db_name, db_user, db_password, db_host, db_port)
else:
    print('Неверный выбор действия')




server-----------------------------------------------------------------------------------------
import datetime
from flask import Flask, render_template, request
import psycopg2

app = Flask(__name__)

# Подключение к базе данных
conn = psycopg2.connect(
    dbname="pr_practice_VorobyevP",
    user="postgres",
    password="admin",
    host="localhost",
    port="5432"
)

# Функция для получения данных из базы данных
def get_data():
    cur = conn.cursor()
    cur.execute("SELECT Date, Variable, min, max FROM statistics_sample")
    data = [{'Date': row[0], 'Variable': row[1], 'min': row[2], 'max': row[3]} for row in cur.fetchall()]
    cur.close()
    return data

# Функция для поиска данных по дате
def search_data(date):
    cur = conn.cursor()
    cur.execute("SELECT Variable, min, max, Date FROM statistics_sample WHERE Date = %s", (date,))
    data = [{'Variable': row[0], 'min': row[1], 'max': row[2], 'Date': row[3]} for row in cur.fetchall()]
    cur.close()
    return data


# Функция для поиска данных по диапазону дат
def search_data_range(date1, date2):
    cur = conn.cursor()
    cur.execute("SELECT Variable, SUM(min), SUM(max) FROM statistics_sample WHERE Date BETWEEN %s AND %s GROUP BY Variable ORDER BY Variable", (date1, date2))
    data = [{'Variable': row[0], 'min': row[1], 'max': row[2]} for row in cur.fetchall()]
    cur.close()
    return data

# Маршрут для главной страницы
@app.route('/')
def index():
    data = get_data()
    return render_template('page.html', data=data)

# Маршрут для поиска по дате
@app.route('/search', methods=['POST'])
def search():
    date_str = request.form.get('date')
    date_obj = datetime.datetime.strptime(date_str, '%Y-%m-%d')
    data = search_data(date_obj)
    return render_template('page.html', data=data)

# Маршрут для поиска по диапазону дат
@app.route('/search_range', methods=['POST'])
def search_range():
    date1_str = request.form.get('date1')
    date2_str = request.form.get('date2')
    date1_obj = datetime.datetime.strptime(date1_str, '%Y-%m-%d')
    date2_obj = datetime.datetime.strptime(date2_str, '%Y-%m-%d')
    data = search_data_range(date1_obj, date2_obj)
    return render_template('page.html', data=data, date1=date1_obj, date2=date2_obj)

@app.route('/reset', methods=['POST'])
def reset():
    # Сбросить все фильтры и получить все данные из базы данных
    data = get_data()
    return render_template('page.html', data=data)


if __name__ == '__main__':
    app.run(debug=True)


page.html---------------------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html>
<head>
    <title>Statistics</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
</head>
<body>
    <div class="container">
        <h1>Statistics</h1>
        <h3>Поиск данных по дате:</h3>
        <form method="POST" action="/search">
            <div class="form-group">
                <label for="date">Введите дату:</label>
                <input type="date" class="form-control" id="date" name="date" required onchange="validateDate(this)">
                <small id="dateHelp" class="form-text text-muted"></small>
            </div>
            <button type="submit" class="btn btn-primary">Вывести</button>
        </form>
        <h3>Поиск данных по периоду:</h3>
        <form method="POST" action="/search_range">
            <div class="form-group">
                <label for="date1">Введите начальную дату:</label>
                <input type="date" class="form-control" id="date1" name="date1" required onchange="validateDate(this)">
                <small id="dateHelp1" class="form-text text-muted"></small>
            </div>
            <div class="form-group">
                <label for="date2">Введите конечную дату:</label>
                <input type="date" class="form-control" id="date2" name="date2" required onchange="validateDate(this)">
                <small id="dateHelp2" class="form-text text-muted"></small>
            </div>
            <button type="submit" class="btn btn-primary">Вывести</button>
        </form>
        <form method="POST" action="/reset">
            <button type="submit" class="btn btn-secondary">Сбросить поиск</button>
        </form>

        <table class="table">
            <thead>
                <tr>
                    <th>Variable</th>
                    <th>Min</th>
                    <th>Max</th>
                </tr>
            </thead>
            <tbody>
            {% if data %}
                {% if date1 and date2 %}
                    <tr class="table-secondary">
                        <td colspan="3">Статистика с {{ date1.strftime('%d.%m.%Y') }} по {{ date2.strftime('%d.%m.%Y') }}</td>
                    </tr>
                    {% for row in data %}
                        <tr>
                            <td>{{ row['Variable'] }}</td>
                            <td>{{ row['min'] }}</td>
                            <td>{{ row['max'] }}</td>
                        </tr>
                    {% endfor %}
                {% else %}
                    {% for date, rows in data | groupby('Date') %}
                        <tr class="table-secondary">
                            <td colspan="3">Статистика за {{ date.strftime('%d.%m.%Y') }}</td>
                        </tr>
                        {% for row in rows %}
                            <tr>
                                <td>{{ row['Variable'] }}</td>
                                <td>{{ row['min'] }}</td>
                                <td>{{ row['max'] }}</td>
                            </tr>
                        {% endfor %}
                    {% endfor %}
                {% endif %}
            {% else %}
                <tr>
                    <td colspan="3">No data found</td>
                </tr>
            {% endif %}
            </tbody>
        </table>
    </div>

    <script>
    function validateDate(input) {
        var date = new Date(input.value);
        if (date.getFullYear() < 1950 || date.getFullYear() > 2050) {
            input.setCustomValidity('Пожалуйста, введите дату в диапазоне от 1950 до 2050 года.');
        } else {
            input.setCustomValidity('');
        }
    }
    </script>
</body>
</html>
